プロセッサ設計演習用のテストプログラムです。

moduleには配布用のモジュール（メモリ・レジスタファイル・テストモジュール）が入っています。
自分が作ったプロセッサに組み込んでください。
top_test.vの266行目は自分のプロセッサのレジスタファイルのインスタンス名に合わせて変更する必要があります。
詳しくは配付資料に記載されていますので、確認してください。

asmには基本的なアセンブリ言語によるプログラムが格納されています。
動作検証が不十分なので動作するかはわかりません。
基本的にはC言語の方で動作検証してください。

cにはC言語で書かれたテストプログラムが格納されています。
helloはかなり簡単なプログラムなので、1度実行できることを確認してみてください。
そのほかは結構難しめの問題です。
最終的には実行できるようになるはずですが、時間がかかると思うので、余裕があったら遊んでみるといいと思います。

MiBenchには動作確認用のプログラムが格納されています。
これが実行できるようにすることが目標となります。
また、この実行にかかったサイクル数を元に性能を評価するので、必ず実行できるようにしてください。

基本的には各プログラムのソースコードが格納されているディレクトリでmakeコマンドを実行すると、Imem.datとDmem.datが生成されます。
この2つのファイルを設計したプロセッサのtop_test.vと同じディレクトリにコピーしてシミュレーションを実行すると、動作するはずです。
ただし、コンパイルのために、multilib対応のRISC-Vツールセット（コンパイラやリンカの集合）が必要です。
自分のコンピュータ上で動かしたいという人はこの準備も行ってください。
woodblock上にはすでに必要なコンパイラ類がすべてインストールされているので、makeコマンドの実行だけでうまくいきます。

なにかあったら、伊織までお知らせください。

～コードの最適化について～
普段gccでコンパイルをするとき、何もしなければレベル3（最大限）の最適化がされます。
これはループアンローリング（回数が決まっているループを同じコードの連続に書き換える）や参照されない変数の省略、
関数のインライン化（呼び出し回数が少なかったり、短かったりする関数を呼び出すのではなく、関数の中身をその場に展開する）などの工夫を自動でして、コードができるだけ速く動作するようにしてくれる機能です。
ただプログラミングをするだけであればとっても便利な機能ですが、C言語コードから大きく違ったアセンブリコードが生成されることも多く、コードの対応関係がわかりにくいです。
プロセッサ設計演習では、C言語コードがどのようにアセンブリコードになるかということも理解してもらいたいので、初期設定ではこの最適化をレベル0（まったく最適化をせず、愚直に変換する）にしています。
ただ、MiBenchのlargeなどは数時間単位の実行時間になります。
もし、最適化を施したい場合は
	make OPTIMIZE=3
のように、
	OPTIMIZE=<最適化レベル0～3>
をつけてビルドしてください。
ただし、最適化を施した場合は、公正な比較のため実行サイクル数を比較する場合にその旨の記載を忘れないでください。

～より高度なプロセッサを設計する人のために～
そのままビルドした場合、RV32I向けのdatファイルが作成されます。
RV32IはRISC-Vの最小構成で、32ビットの整数加減算、論理演算、比較、分岐をサポートしています。
逆に言えば、命令セットレベルでは乗算や除算、浮動小数点数演算等はサポートされません。
このため、RV32I向けビルドでは乗算、除算、剰余算、浮動小数点演数算など、サポートされない演算は整数演算を組み合わせることで実現されます。
このおかげで、特になにも気にしなくても、様々な演算が実行可能です。
しかし、乗算や浮動小数点数演算が多数の命令の組み合わせで実現されるため、非常に遅いです。
詳しくは『RISC-V原典』を参照してほしいのですが、RISC-Vにはオプションの拡張命令セットが用意されています。
とりあえず、woodblock上のツールセットが対応しているのは以下の拡張です。
それぞれ32ビット版と64ビット版があります。
RV-M: 乗除算拡張
RV-F: 単精度浮動小数点数拡張
RV-D: 倍精度浮動小数点数拡張
RV-A: アトミック命令拡張
RV-C: 圧縮命令拡張
たとえば、基本命令セットと乗除算をサポートする32ビット命令セットの場合は、RV32IMといった表記になります。
この中で、商用プロセッサに求められるRV-IMFDAはRV32Gと呼ばれます。
もし、これらを組み込んだ場合は、makeを実行する際にオプションをつけなければ、RV32I用のコードが生成されるため、高速化できません。
つけるべきオプションは、
MABI={ilp32, ilp32d, ilp32e, ilp32f, lp64, lp64d, lp64f}
MARCH={rv32i, rv32im, rv32imf, rv32imfd, rv32g, rv32gc, rv64i, rv64im, rv64imf, rv64imfd, rv64g, rv64gc, など}
です。
たとえば、乗除算演算を追加した32ビット命令セットのためのコードを生成したければ、
make MABI=ilp32 MARCH=rv32im
としてビルドしてください。

変更履歴
日付		変更者		変更点
2021/04/15 	伊織		とりあえず完成（のはず）
2021/04/16	伊織		top_test.vのメモリダンプの不具合修正
2021/04/22	伊織		asmのmakefileのインクルードファイルを修正、アセンブリは要修正
2021/04/26	伊織		top_test.vのハーフワードのロード/ストアの不具合を修正
2021/12/28	伊織		最適化と拡張命令セットに対応
